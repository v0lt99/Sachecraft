(module
  (memory (export "memory") 1)
  (global $player_x (mut i32) (i32.const 10))
  (global $player_y (mut i32) (i32.const 7))
  (global $player_vy (mut i32) (i32.const 0))
  (global $on_ground (mut i32) (i32.const 0))

  ;; Block IDs: 0 = Sache, 1 = Grass, 2 = Ore, 3 = Mystery, 4 = Air

  ;; Initialize world (called once)
  (func $init_world
    (local $x i32) (local $y i32) (local $off i32)
    (loop $yloop
      (local.set $x (i32.const 0))
      (loop $xloop
        (local.set $off (i32.add (i32.mul (local.get $y) (i32.const 20)) (local.get $x)))
        (if (i32.eq (local.get $y) (i32.const 14))
          (then (i32.store8 (local.get $off) (i32.const 1)))
          (else
            (if (i32.eq (local.get $y) (i32.const 13))
              (then
                (i32.store8 (local.get $off)
                  (i32.rem_u (i32.add (local.get $x) (local.get $y) (i32.const 2)) (i32.const 4))
                )
              )
              (else (i32.store8 (local.get $off) (i32.const 4)))
            )
          )
        )
        (local.set $x (i32.add (local.get $x) (i32.const 1)))
        (br_if $xloop (i32.lt_s (local.get $x) (i32.const 20)))
      )
      (local.set $y (i32.add (local.get $y) (i32.const 1)))
      (br_if $yloop (i32.lt_s (local.get $y) (i32.const 15)))
    )
  )
  (start $init_world)

  ;; get_block(x, y) -> i32
  (func $get_block (param $x i32) (param $y i32) (result i32)
    (local $off i32)
    (if (i32.or (i32.lt_s (local.get $x) (i32.const 0))
                (i32.ge_s (local.get $x) (i32.const 20))
                (i32.lt_s (local.get $y) (i32.const 0))
                (i32.ge_s (local.get $y) (i32.const 15)))
      (then (return (i32.const 4)))
    )
    (local.set $off (i32.add (i32.mul (local.get $y) (i32.const 20)) (local.get $x)))
    (i32.load8_u (local.get $off))
  )
  (export "get_block" (func $get_block))

  ;; set_block(x, y, id)
  (func $set_block (param $x i32) (param $y i32) (param $id i32)
    (local $off i32)
    (if (i32.or (i32.lt_s (local.get $x) (i32.const 0))
                (i32.ge_s (local.get $x) (i32.const 20))
                (i32.lt_s (local.get $y) (i32.const 0))
                (i32.ge_s (local.get $y) (i32.const 15)))
      (then (return))
    )
    (local.set $off (i32.add (i32.mul (local.get $y) (i32.const 20)) (local.get $x)))
    (i32.store8 (local.get $off) (local.get $id))
  )
  (export "set_block" (func $set_block))

  ;; Player movement (horizontal, collision)
  (func $move_player (param $dx i32) (param $dy i32)
    (local $nx i32)
    (local $ny i32)
    (local.set $nx (i32.add (global.get $player_x) (local.get $dx)))
    (local.set $ny (i32.add (global.get $player_y) (local.get $dy)))
    (if (i32.or (i32.lt_s (local.get $nx) (i32.const 0))
                (i32.ge_s (local.get $nx) (i32.const 20))
                (i32.lt_s (local.get $ny) (i32.const 0))
                (i32.ge_s (local.get $ny) (i32.const 15)))
      (then (return))
    )
    (local $off i32)
    (local.set $off (i32.add (i32.mul (local.get $ny) (i32.const 20)) (local.get $nx)))
    (if (i32.ne (i32.load8_u (local.get $off)) (i32.const 4))
      (then (return))
    )
    (global.set $player_x (local.get $nx))
    (global.set $player_y (local.get $ny))
  )
  (export "move_player" (func $move_player))

  ;; Gravity/jumping/game tick
  (func $tick
    (local $px i32) (local $py i32) (local $ny i32) (local $off i32)
    (local.set $px (global.get $player_x))
    (local.set $py (global.get $player_y))
    ;; On ground check
    (if (i32.eq (global.get $player_vy) (i32.const 0))
      (then
        (local.set $ny (i32.add (local.get $py) (i32.const 1)))
        (if (i32.and (i32.lt_s (local.get $ny) (i32.const 15))
              (i32.ne (i32.load8_u (i32.add (i32.mul (local.get $ny) (i32.const 20)) (local.get $px))) (i32.const 4)))
          (then (global.set $on_ground (i32.const 1)))
          (else (global.set $on_ground (i32.const 0)))
        )
      )
    )
    (if (i32.eq (global.get $on_ground) (i32.const 0))
      (then (global.set $player_vy (i32.add (global.get $player_vy) (i32.const 1))))
      (else (global.set $player_vy (i32.const 0)))
    )
    (if (i32.ne (global.get $player_vy) (i32.const 0))
      (then
        (local.set $ny (i32.add (local.get $py) (global.get $player_vy)))
        (if (i32.lt_s (local.get $ny) (i32.const 0)) (then (local.set $ny (i32.const 0))))
        (if (i32.ge_s (local.get $ny) (i32.const 15)) (then (local.set $ny (i32.const 14))))
        (block
          (loop
            (if (i32.or (i32.eq (local.get $py) (local.get $ny))
                        (i32.ne (i32.load8_u (i32.add (i32.mul (local.get $ny) (i32.const 20)) (local.get $px))) (i32.const 4)))
              (then (br 1))
            )
            (if (i32.lt_s (local.get $ny) (local.get $py))
              (then (local.set $ny (i32.add (local.get $ny) (i32.const 1))))
              (else (local.set $ny (i32.sub (local.get $ny) (i32.const 1))))
            )
            (br 0)
          )
        )
        (global.set $player_y (local.get $ny))
        (local.set $off (i32.add (i32.mul (i32.add (local.get $ny) (i32.const 1)) (i32.const 20)) (local.get $px)))
        (if (i32.and (i32.lt_s (i32.add (local.get $ny) (i32.const 1)) (i32.const 15))
                 (i32.ne (i32.load8_u (local.get $off)) (i32.const 4)))
          (then (global.set $player_vy (i32.const 0)) (global.set $on_ground (i32.const 1)))
        )
      )
    )
  )
  (export "tick" (func $tick))

  (func $can_jump (result i32)
    (global.get $on_ground)
  )
  (export "can_jump" (func $can_jump))

  (func $jump
    (if (i32.eq (global.get $on_ground) (i32.const 1))
      (then
        (global.set $player_vy (i32.const -2))
        (global.set $on_ground (i32.const 0))
      )
    )
  )
  (export "jump" (func $jump))

  (func $get_player_x (result i32)
    (global.get $player_x)
  )
  (func $get_player_y (result i32)
    (global.get $player_y)
  )
  (export "get_player_x" (func $get_player_x))
  (export "get_player_y" (func $get_player_y))
)

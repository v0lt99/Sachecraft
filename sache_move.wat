(module
  (memory (export "memory") 1)
  (global $player_x (mut i32) (i32.const 300))
  (global $player_y (mut i32) (i32.const 220))

  (func $move_player (param $dx i32) (param $dy i32)
    (global.set $player_x
      (i32.clamp_s
        (i32.add (global.get $player_x) (local.get $dx))
        (i32.const 0)
        (i32.const 600)
      )
    )
    (global.set $player_y
      (i32.clamp_s
        (i32.add (global.get $player_y) (local.get $dy))
        (i32.const 0)
        (i32.const 440)
      )
    )
  )
  (func $get_player_x (result i32)
    (global.get $player_x)
  )
  (func $get_player_y (result i32)
    (global.get $player_y)
  )

  (export "move_player" (func $move_player))
  (export "get_player_x" (func $get_player_x))
  (export "get_player_y" (func $get_player_y))

  ;; Clamp helper (WebAssembly MVP doesn't have i32.clamp_s, so inline it)
  (func $i32_clamp_s (param $x i32) (param $min i32) (param $max i32) (result i32)
    (local $v i32)
    (local.set $v (local.get $x))
    (if (i32.lt_s (local.get $v) (local.get $min))
      (then (local.set $v (local.get $min)))
    )
    (if (i32.gt_s (local.get $v) (local.get $max))
      (then (local.set $v (local.get $max)))
    )
    (local.get $v)
  )
  (func $clamp_x (param $x i32) (result i32)
    (call $i32_clamp_s (local.get $x) (i32.const 0) (i32.const 600))
  )
  (func $clamp_y (param $y i32) (result i32)
    (call $i32_clamp_s (local.get $y) (i32.const 0) (i32.const 440))
  )
)
